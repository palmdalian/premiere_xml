import sys
import os
import json
import jxmlease
import base64

class PremiereXML:
	def __init__(self):
		# reference = "Ref.xml"
		# with open(reference, 'rb') as f:
		# 	self.root = jxmlease.parse(f)
		ref_blob = "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjwhRE9DVFlQRSB4bWVtbD4NCjx4bWVtbCB2ZXJzaW9uPSI0Ij4NCgk8c2VxdWVuY2UgaWQ9InNlcXVlbmNlLTMiIFRMLlNRQXVkaW9WaXNpYmxlQmFzZT0iMCIgVEwuU1FWaWRlb1Zpc2libGVCYXNlPSIwIiBUTC5TUVZpc2libGVCYXNlVGltZT0iMCIgVEwuU1FBVkRpdmlkZXJQb3NpdGlvbj0iMC41IiBUTC5TUUhpZGVTaHlUcmFja3M9IjAiIFRMLlNRSGVhZGVyV2lkdGg9IjIzNiIgTW9uaXRvci5Qcm9ncmFtWm9vbU91dD0iMzYxOTcyODAwMDAwMCIgTW9uaXRvci5Qcm9ncmFtWm9vbUluPSIwIiBUTC5TUVRpbWVQZXJQaXhlbD0iMC40MzM1MjYwMTE1NjA2OTM2NSIgTVouRWRpdExpbmU9IjU1MDM2ODAwMDAwMCIgTVouU2VxdWVuY2UuUHJldmlld0ZyYW1lU2l6ZUhlaWdodD0iMTA4MCIgTVouU2VxdWVuY2UuUHJldmlld0ZyYW1lU2l6ZVdpZHRoPSIxOTIwIiBNWi5TZXF1ZW5jZS5BdWRpb1RpbWVEaXNwbGF5Rm9ybWF0PSIyMDAiIE1aLlNlcXVlbmNlLlByZXZpZXdSZW5kZXJpbmdDbGFzc0lEPSIxMjk3MTA2NzYxIiBNWi5TZXF1ZW5jZS5QcmV2aWV3UmVuZGVyaW5nUHJlc2V0Q29kZWM9IjEyOTcxMDcyNzgiIE1aLlNlcXVlbmNlLlByZXZpZXdSZW5kZXJpbmdQcmVzZXRQYXRoPSJFbmNvZGVyUHJlc2V0cy9TZXF1ZW5jZVByZXZpZXcvNzk1NDU0ZDktZDNjMi00MjlkLTk0NzQtOTIzYWIxM2I3MDE4L0ktRnJhbWUgT25seSBNUEVHLmVwciIgTVouU2VxdWVuY2UuUHJldmlld1VzZU1heFJlbmRlclF1YWxpdHk9ImZhbHNlIiBNWi5TZXF1ZW5jZS5QcmV2aWV3VXNlTWF4Qml0RGVwdGg9ImZhbHNlIiBNWi5TZXF1ZW5jZS5FZGl0aW5nTW9kZUdVSUQ9Ijc5NTQ1NGQ5LWQzYzItNDI5ZC05NDc0LTkyM2FiMTNiNzAxOCIgTVouU2VxdWVuY2UuVmlkZW9UaW1lRGlzcGxheUZvcm1hdD0iMTA4IiBNWi5Xb3JrT3V0UG9pbnQ9IjM2MTk3MjgwMDAwMDAiIE1aLldvcmtJblBvaW50PSIwIiBNWi5aZXJvUG9pbnQ9IjAiIGV4cGxvZGVkVHJhY2tzPSJ0cnVlIj4NCgkJPHV1aWQ+ZmYxOWZmNWYtM2IxYi00OWQ3LTgxOTAtYmQ2NmNhMDdjMmQ5PC91dWlkPg0KCQk8ZHVyYXRpb24+ODU1PC9kdXJhdGlvbj4NCgkJPHJhdGU+DQoJCQk8dGltZWJhc2U+NjA8L3RpbWViYXNlPg0KCQkJPG50c2M+RkFMU0U8L250c2M+DQoJCTwvcmF0ZT4NCgkJPG5hbWU+U2VxdWVuY2U8L25hbWU+DQoJCTxtZWRpYT4NCgkJCTx2aWRlbz4NCgkJCQk8Zm9ybWF0Pg0KCQkJCQk8c2FtcGxlY2hhcmFjdGVyaXN0aWNzPg0KCQkJCQkJPHJhdGU+DQoJCQkJCQkJPHRpbWViYXNlPjYwPC90aW1lYmFzZT4NCgkJCQkJCQk8bnRzYz5GQUxTRTwvbnRzYz4NCgkJCQkJCTwvcmF0ZT4NCgkJCQkJCTxjb2RlYz4NCgkJCQkJCQk8bmFtZT5BcHBsZSBQcm9SZXMgNDIyPC9uYW1lPg0KCQkJCQkJCTxhcHBzcGVjaWZpY2RhdGE+DQoJCQkJCQkJCTxhcHBuYW1lPkZpbmFsIEN1dCBQcm88L2FwcG5hbWU+DQoJCQkJCQkJCTxhcHBtYW51ZmFjdHVyZXI+QXBwbGUgSW5jLjwvYXBwbWFudWZhY3R1cmVyPg0KCQkJCQkJCQk8YXBwdmVyc2lvbj43LjA8L2FwcHZlcnNpb24+DQoJCQkJCQkJCTxkYXRhPg0KCQkJCQkJCQkJPHF0Y29kZWM+DQoJCQkJCQkJCQkJPGNvZGVjbmFtZT5BcHBsZSBQcm9SZXMgNDIyPC9jb2RlY25hbWU+DQoJCQkJCQkJCQkJPGNvZGVjdHlwZW5hbWU+QXBwbGUgUHJvUmVzIDQyMjwvY29kZWN0eXBlbmFtZT4NCgkJCQkJCQkJCQk8Y29kZWN0eXBlY29kZT5hcGNuPC9jb2RlY3R5cGVjb2RlPg0KCQkJCQkJCQkJCTxjb2RlY3ZlbmRvcmNvZGU+YXBwbDwvY29kZWN2ZW5kb3Jjb2RlPg0KCQkJCQkJCQkJCTxzcGF0aWFscXVhbGl0eT4xMDI0PC9zcGF0aWFscXVhbGl0eT4NCgkJCQkJCQkJCQk8dGVtcG9yYWxxdWFsaXR5PjA8L3RlbXBvcmFscXVhbGl0eT4NCgkJCQkJCQkJCQk8a2V5ZnJhbWVyYXRlPjA8L2tleWZyYW1lcmF0ZT4NCgkJCQkJCQkJCQk8ZGF0YXJhdGU+MDwvZGF0YXJhdGU+DQoJCQkJCQkJCQk8L3F0Y29kZWM+DQoJCQkJCQkJCTwvZGF0YT4NCgkJCQkJCQk8L2FwcHNwZWNpZmljZGF0YT4NCgkJCQkJCTwvY29kZWM+DQoJCQkJCQk8d2lkdGg+MTkyMDwvd2lkdGg+DQoJCQkJCQk8aGVpZ2h0PjEwODA8L2hlaWdodD4NCgkJCQkJCTxhbmFtb3JwaGljPkZBTFNFPC9hbmFtb3JwaGljPg0KCQkJCQkJPHBpeGVsYXNwZWN0cmF0aW8+c3F1YXJlPC9waXhlbGFzcGVjdHJhdGlvPg0KCQkJCQkJPGZpZWxkZG9taW5hbmNlPm5vbmU8L2ZpZWxkZG9taW5hbmNlPg0KCQkJCQkJPGNvbG9yZGVwdGg+MjQ8L2NvbG9yZGVwdGg+DQoJCQkJCTwvc2FtcGxlY2hhcmFjdGVyaXN0aWNzPg0KCQkJCTwvZm9ybWF0Pg0KCQkJCTx0cmFjayBUTC5TUVRyYWNrU2h5PSIwIiBUTC5TUVRyYWNrRXhwYW5kZWRIZWlnaHQ9IjI1IiBUTC5TUVRyYWNrRXhwYW5kZWQ9IjAiIE1aLlRyYWNrVGFyZ2V0ZWQ9IjEiPg0KCQkJCQk8Y2xpcGl0ZW0gaWQ9ImNsaXBpdGVtLTYiPg0KCQkJCQkJPG1hc3RlcmNsaXBpZD5tYXN0ZXJjbGlwLTU8L21hc3RlcmNsaXBpZD4NCgkJCQkJCTxuYW1lPkEubXA0PC9uYW1lPg0KCQkJCQkJPGVuYWJsZWQ+VFJVRTwvZW5hYmxlZD4NCgkJCQkJCTxkdXJhdGlvbj40Mjc8L2R1cmF0aW9uPg0KCQkJCQkJPHJhdGU+DQoJCQkJCQkJPHRpbWViYXNlPjYwPC90aW1lYmFzZT4NCgkJCQkJCQk8bnRzYz5GQUxTRTwvbnRzYz4NCgkJCQkJCTwvcmF0ZT4NCgkJCQkJCTxzdGFydD4wPC9zdGFydD4NCgkJCQkJCTxlbmQ+NDI3PC9lbmQ+DQoJCQkJCQk8aW4+MDwvaW4+DQoJCQkJCQk8b3V0PjQyNzwvb3V0Pg0KCQkJCQkJPGFscGhhdHlwZT5ub25lPC9hbHBoYXR5cGU+DQoJCQkJCQk8cGl4ZWxhc3BlY3RyYXRpbz5zcXVhcmU8L3BpeGVsYXNwZWN0cmF0aW8+DQoJCQkJCQk8YW5hbW9ycGhpYz5GQUxTRTwvYW5hbW9ycGhpYz4NCgkJCQkJCTxmaWxlIGlkPSJmaWxlLTUiPg0KCQkJCQkJCTxuYW1lPkEubXA0PC9uYW1lPg0KCQkJCQkJCTxwYXRodXJsPmZpbGU6Ly9sb2NhbGhvc3QvQS5tcDQ8L3BhdGh1cmw+DQoJCQkJCQkJPHJhdGU+DQoJCQkJCQkJCTx0aW1lYmFzZT42MDwvdGltZWJhc2U+DQoJCQkJCQkJCTxudHNjPkZBTFNFPC9udHNjPg0KCQkJCQkJCTwvcmF0ZT4NCgkJCQkJCQk8ZHVyYXRpb24+NDI3PC9kdXJhdGlvbj4NCgkJCQkJCQk8dGltZWNvZGU+DQoJCQkJCQkJCTxyYXRlPg0KCQkJCQkJCQkJPHRpbWViYXNlPjYwPC90aW1lYmFzZT4NCgkJCQkJCQkJCTxudHNjPkZBTFNFPC9udHNjPg0KCQkJCQkJCQk8L3JhdGU+DQoJCQkJCQkJCTxzdHJpbmc+MDA6MDA6MDA6MDA8L3N0cmluZz4NCgkJCQkJCQkJPGZyYW1lPjA8L2ZyYW1lPg0KCQkJCQkJCQk8ZGlzcGxheWZvcm1hdD5OREY8L2Rpc3BsYXlmb3JtYXQ+DQoJCQkJCQkJCTxyZWVsPg0KCQkJCQkJCQkJPG5hbWU+PC9uYW1lPg0KCQkJCQkJCQk8L3JlZWw+DQoJCQkJCQkJPC90aW1lY29kZT4NCgkJCQkJCQk8bWVkaWE+DQoJCQkJCQkJCTx2aWRlbz4NCgkJCQkJCQkJCTxzYW1wbGVjaGFyYWN0ZXJpc3RpY3M+DQoJCQkJCQkJCQkJPHJhdGU+DQoJCQkJCQkJCQkJCTx0aW1lYmFzZT42MDwvdGltZWJhc2U+DQoJCQkJCQkJCQkJCTxudHNjPkZBTFNFPC9udHNjPg0KCQkJCQkJCQkJCTwvcmF0ZT4NCgkJCQkJCQkJCQk8d2lkdGg+MTkyMDwvd2lkdGg+DQoJCQkJCQkJCQkJPGhlaWdodD4xMDgwPC9oZWlnaHQ+DQoJCQkJCQkJCQkJPGFuYW1vcnBoaWM+RkFMU0U8L2FuYW1vcnBoaWM+DQoJCQkJCQkJCQkJPHBpeGVsYXNwZWN0cmF0aW8+c3F1YXJlPC9waXhlbGFzcGVjdHJhdGlvPg0KCQkJCQkJCQkJCTxmaWVsZGRvbWluYW5jZT5ub25lPC9maWVsZGRvbWluYW5jZT4NCgkJCQkJCQkJCTwvc2FtcGxlY2hhcmFjdGVyaXN0aWNzPg0KCQkJCQkJCQk8L3ZpZGVvPg0KCQkJCQkJCTwvbWVkaWE+DQoJCQkJCQk8L2ZpbGU+DQoJCQkJCQk8bG9nZ2luZ2luZm8+DQoJCQkJCQkJPGRlc2NyaXB0aW9uPjwvZGVzY3JpcHRpb24+DQoJCQkJCQkJPHNjZW5lPjwvc2NlbmU+DQoJCQkJCQkJPHNob3R0YWtlPjwvc2hvdHRha2U+DQoJCQkJCQkJPGxvZ25vdGU+PC9sb2dub3RlPg0KCQkJCQkJPC9sb2dnaW5naW5mbz4NCgkJCQkJCTxsYWJlbHM+DQoJCQkJCQkJPGxhYmVsMj5WaW9sZXQ8L2xhYmVsMj4NCgkJCQkJCTwvbGFiZWxzPg0KCQkJCQk8L2NsaXBpdGVtPg0KCQkJCQk8ZW5hYmxlZD5UUlVFPC9lbmFibGVkPg0KCQkJCQk8bG9ja2VkPkZBTFNFPC9sb2NrZWQ+DQoJCQkJPC90cmFjaz4NCgkJCTwvdmlkZW8+DQoJCQk8YXVkaW8+DQoJCQkJPG51bU91dHB1dENoYW5uZWxzPjI8L251bU91dHB1dENoYW5uZWxzPg0KCQkJCTxmb3JtYXQ+DQoJCQkJCTxzYW1wbGVjaGFyYWN0ZXJpc3RpY3M+DQoJCQkJCQk8ZGVwdGg+MTY8L2RlcHRoPg0KCQkJCQkJPHNhbXBsZXJhdGU+NDgwMDA8L3NhbXBsZXJhdGU+DQoJCQkJCTwvc2FtcGxlY2hhcmFjdGVyaXN0aWNzPg0KCQkJCTwvZm9ybWF0Pg0KCQkJCTxvdXRwdXRzPg0KCQkJCQk8Z3JvdXA+DQoJCQkJCQk8aW5kZXg+MTwvaW5kZXg+DQoJCQkJCQk8bnVtY2hhbm5lbHM+MTwvbnVtY2hhbm5lbHM+DQoJCQkJCQk8ZG93bm1peD4wPC9kb3dubWl4Pg0KCQkJCQkJPGNoYW5uZWw+DQoJCQkJCQkJPGluZGV4PjE8L2luZGV4Pg0KCQkJCQkJPC9jaGFubmVsPg0KCQkJCQk8L2dyb3VwPg0KCQkJCQk8Z3JvdXA+DQoJCQkJCQk8aW5kZXg+MjwvaW5kZXg+DQoJCQkJCQk8bnVtY2hhbm5lbHM+MTwvbnVtY2hhbm5lbHM+DQoJCQkJCQk8ZG93bm1peD4wPC9kb3dubWl4Pg0KCQkJCQkJPGNoYW5uZWw+DQoJCQkJCQkJPGluZGV4PjI8L2luZGV4Pg0KCQkJCQkJPC9jaGFubmVsPg0KCQkJCQk8L2dyb3VwPg0KCQkJCTwvb3V0cHV0cz4NCgkJCQk8dHJhY2sgVEwuU1FUcmFja0F1ZGlvS2V5ZnJhbWVTdHlsZT0iMCIgVEwuU1FUcmFja1NoeT0iMCIgVEwuU1FUcmFja0V4cGFuZGVkSGVpZ2h0PSIyNSIgVEwuU1FUcmFja0V4cGFuZGVkPSIwIiBNWi5UcmFja1RhcmdldGVkPSIxIiBQYW5uZXJDdXJyZW50VmFsdWU9IjAuNSIgUGFubmVySXNJbnZlcnRlZD0idHJ1ZSIgUGFubmVyU3RhcnRLZXlmcmFtZT0iLTkxNDQ1NzYwMDAwMDAwMDAwLDAuNSwwLDAsMCwwLDAsMCIgUGFubmVyTmFtZT0iQmFsYW5jZSIgY3VycmVudEV4cGxvZGVkVHJhY2tJbmRleD0iMCIgdG90YWxFeHBsb2RlZFRyYWNrQ291bnQ9IjEiIHByZW1pZXJlVHJhY2tUeXBlPSJTdGVyZW8iPg0KCQkJCQk8Y2xpcGl0ZW0gaWQ9ImNsaXBpdGVtLTciIHByZW1pZXJlQ2hhbm5lbFR5cGU9Im1vbm8iPg0KCQkJCQkJPG1hc3RlcmNsaXBpZD5tYXN0ZXJjbGlwLTY8L21hc3RlcmNsaXBpZD4NCgkJCQkJCTxuYW1lPkIuYWlmZjwvbmFtZT4NCgkJCQkJCTxlbmFibGVkPlRSVUU8L2VuYWJsZWQ+DQoJCQkJCQk8ZHVyYXRpb24+ODU1PC9kdXJhdGlvbj4NCgkJCQkJCTxyYXRlPg0KCQkJCQkJCTx0aW1lYmFzZT42MDwvdGltZWJhc2U+DQoJCQkJCQkJPG50c2M+RkFMU0U8L250c2M+DQoJCQkJCQk8L3JhdGU+DQoJCQkJCQk8c3RhcnQ+MDwvc3RhcnQ+DQoJCQkJCQk8ZW5kPjg1NTwvZW5kPg0KCQkJCQkJPGluPjA8L2luPg0KCQkJCQkJPG91dD44NTU8L291dD4NCgkJCQkJCTxmaWxlIGlkPSJmaWxlLTYiPg0KCQkJCQkJCTxuYW1lPkIuYWlmZjwvbmFtZT4NCgkJCQkJCQk8cGF0aHVybD5maWxlOi8vbG9jYWxob3N0L0IuYWlmZjwvcGF0aHVybD4NCgkJCQkJCQk8cmF0ZT4NCgkJCQkJCQkJPHRpbWViYXNlPjMwPC90aW1lYmFzZT4NCgkJCQkJCQkJPG50c2M+VFJVRTwvbnRzYz4NCgkJCQkJCQk8L3JhdGU+DQoJCQkJCQkJPGR1cmF0aW9uPjQyNzwvZHVyYXRpb24+DQoJCQkJCQkJPHRpbWVjb2RlPg0KCQkJCQkJCQk8cmF0ZT4NCgkJCQkJCQkJCTx0aW1lYmFzZT4zMDwvdGltZWJhc2U+DQoJCQkJCQkJCQk8bnRzYz5UUlVFPC9udHNjPg0KCQkJCQkJCQk8L3JhdGU+DQoJCQkJCQkJCTxzdHJpbmc+MDA7MDA7MDA7MDA8L3N0cmluZz4NCgkJCQkJCQkJPGZyYW1lPjA8L2ZyYW1lPg0KCQkJCQkJCQk8ZGlzcGxheWZvcm1hdD5ERjwvZGlzcGxheWZvcm1hdD4NCgkJCQkJCQkJPHJlZWw+DQoJCQkJCQkJCQk8bmFtZT48L25hbWU+DQoJCQkJCQkJCTwvcmVlbD4NCgkJCQkJCQk8L3RpbWVjb2RlPg0KCQkJCQkJCTxtZWRpYT4NCgkJCQkJCQkJPGF1ZGlvPg0KCQkJCQkJCQkJPHNhbXBsZWNoYXJhY3RlcmlzdGljcz4NCgkJCQkJCQkJCQk8ZGVwdGg+MTY8L2RlcHRoPg0KCQkJCQkJCQkJCTxzYW1wbGVyYXRlPjQ4MDAwPC9zYW1wbGVyYXRlPg0KCQkJCQkJCQkJPC9zYW1wbGVjaGFyYWN0ZXJpc3RpY3M+DQoJCQkJCQkJCQk8Y2hhbm5lbGNvdW50PjE8L2NoYW5uZWxjb3VudD4NCgkJCQkJCQkJCTxhdWRpb2NoYW5uZWw+DQoJCQkJCQkJCQkJPHNvdXJjZWNoYW5uZWw+MTwvc291cmNlY2hhbm5lbD4NCgkJCQkJCQkJCTwvYXVkaW9jaGFubmVsPg0KCQkJCQkJCQk8L2F1ZGlvPg0KCQkJCQkJCTwvbWVkaWE+DQoJCQkJCQk8L2ZpbGU+DQoJCQkJCQk8c291cmNldHJhY2s+DQoJCQkJCQkJPG1lZGlhdHlwZT5hdWRpbzwvbWVkaWF0eXBlPg0KCQkJCQkJCTx0cmFja2luZGV4PjE8L3RyYWNraW5kZXg+DQoJCQkJCQk8L3NvdXJjZXRyYWNrPg0KCQkJCQkJPGxvZ2dpbmdpbmZvPg0KCQkJCQkJCTxkZXNjcmlwdGlvbj48L2Rlc2NyaXB0aW9uPg0KCQkJCQkJCTxzY2VuZT48L3NjZW5lPg0KCQkJCQkJCTxzaG90dGFrZT48L3Nob3R0YWtlPg0KCQkJCQkJCTxsb2dub3RlPjwvbG9nbm90ZT4NCgkJCQkJCTwvbG9nZ2luZ2luZm8+DQoJCQkJCQk8bGFiZWxzPg0KCQkJCQkJCTxsYWJlbDI+Q2FyaWJiZWFuPC9sYWJlbDI+DQoJCQkJCQk8L2xhYmVscz4NCgkJCQkJPC9jbGlwaXRlbT4NCgkJCQkJPGVuYWJsZWQ+VFJVRTwvZW5hYmxlZD4NCgkJCQkJPGxvY2tlZD5GQUxTRTwvbG9ja2VkPg0KCQkJCQk8b3V0cHV0Y2hhbm5lbGluZGV4PjE8L291dHB1dGNoYW5uZWxpbmRleD4NCgkJCQk8L3RyYWNrPg0KCQkJPC9hdWRpbz4NCgkJPC9tZWRpYT4NCgkJPHRpbWVjb2RlPg0KCQkJPHJhdGU+DQoJCQkJPHRpbWViYXNlPjYwPC90aW1lYmFzZT4NCgkJCQk8bnRzYz5GQUxTRTwvbnRzYz4NCgkJCTwvcmF0ZT4NCgkJCTxzdHJpbmc+MDA6MDA6MDA6MDA8L3N0cmluZz4NCgkJCTxmcmFtZT4wPC9mcmFtZT4NCgkJCTxkaXNwbGF5Zm9ybWF0Pk5ERjwvZGlzcGxheWZvcm1hdD4NCgkJPC90aW1lY29kZT4NCgkJPGxhYmVscz4NCgkJCTxsYWJlbDI+Rm9yZXN0PC9sYWJlbDI+DQoJCTwvbGFiZWxzPg0KCTwvc2VxdWVuY2U+DQo8L3htZW1sPg0K".encode()
		self.root = jxmlease.parse(base64.b64decode(ref_blob))
		
		self.video_framerate = 60
		self.audio_framerate = 60
		self.masterclips = {}

		self.audio = self.root['xmeml']['sequence']['media']['audio']
		self.video = self.root['xmeml']['sequence']['media']['video']
		self.audio_track = self.audio['track'].list()[0]
		self.video_track = self.video['track'].list()[0]
		self.audio_clipitem = self.audio_track.pop("clipitem") # Get and remove ref clipitem
		self.video_clipitem = self.video_track.pop("clipitem")
		self.clipid = 0


	def timing_string(self, time, framerate):
		t = "{}".format(int(round(time * framerate)))
		return t


	def new_clipitem(self, clip_type, name, path, start, end, insert):
		if clip_type == "audio":
			tempclip = self.audio_clipitem.copy()
		else:
			tempclip = self.video_clipitem.copy()
		tempclip["name"] = name
		if name in self.masterclips:
			tempclip["masterclipid"] = self.masterclips[name]
		else:
			tempclip["masterclipid"] = "masterclip-{}".format(self.clipid)
			self.masterclips[name] = "masterclip-{}".format(self.clipid)

		tempclip["in"] = self.timing_string(start, self.video_framerate)
		tempclip["out"] = self.timing_string(end, self.video_framerate)
		tempclip["start"] = self.timing_string(insert, self.video_framerate)
		tempclip["end"] = self.timing_string((insert + end - start), self.video_framerate)
		tempclip["duration"] = self.timing_string( (end - start), self.video_framerate)
		f = tempclip["file"]
		f.set_xml_attr('id', "file-{}".format(self.clipid))
		f['pathurl'] = os.path.join("file://localhost", path)
		f['name'] = name

		self.clipid += 1
		tempclip.standardize()
		final = jxmlease.XMLDictNode()
		final.add_node(new_node = tempclip, tag="clipitem")
		final.set_xml_attr("id", "clipitem-{}".format(self.clipid))
		return final


if __name__ == '__main__':
	pxml = PremiereXML()
	with open(sys.argv[1], 'r') as f:
		data = json.load(f)
	for track in data['audio_timeline']:
		key = track['key']
		for timing in track['timings']:
			temp = pxml.new_clipitem("audio", timing['media_id'], 'testing', timing['start_time'], timing['end_time'], timing['insert'])
			pxml.audio_track.add_node(tag="clipitem", new_node=temp["clipitem"])
			pxml.audio_track['clipitem'].list()[-1].set_xml_attr("id", temp.get_xml_attr("id"))
	for timing in data['video_timeline']:
		temp = pxml.new_clipitem("video", timing['media_id'], 'testing', timing['start_time'], timing['end_time'], timing['insert'])
		pxml.video_track.add_node(tag="clipitem", new_node=temp["clipitem"])
		pxml.video_track['clipitem'].list()[-1].set_xml_attr("id", temp.get_xml_attr("id"))
	with open(sys.argv[1].replace('.json', '.xml'), 'wb') as f:
		pxml.root = pxml.root
		pxml.root.emit_xml(f)
